name: CI/CD Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET }}
      TFSTATE_KEY: ${{ secrets.TFSTATE_KEY }}

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      # 3Ô∏è‚É£ Get EC2 public IP from tfstate in S3
      - name: Get EC2 IP from tfstate in S3
        id: ec2ip
        run: |
          aws s3 cp s3://$TFSTATE_BUCKET/$TFSTATE_KEY terraform.tfstate --region $AWS_REGION
          IP=$(jq -r '.resources[] 
              | select(.type=="aws_instance" and .name=="nginx_server") 
              | .instances[0].attributes.public_ip' terraform.tfstate)
          # limpiar espacios y saltos de l√≠nea invisibles
          IP=$(echo "$IP" | tr -d '\r\n ')
          if [[ -z "$IP" ]]; then
            echo "‚ùå No se pudo obtener la IP de EC2 desde tfstate"
            exit 1
          fi
          echo "EC2_IP=$IP" >> $GITHUB_ENV
          echo "‚úÖ EC2 IP: $IP"

      # 4Ô∏è‚É£ Debug EC2 IP
      - name: Debug EC2 IP
        run: echo ">$EC2_IP<"

      # 5Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.7'

      # 6Ô∏è‚É£ Generate index.html
      - name: Generate index.html
        working-directory: monitoring-project/docker/nginx
        run: python generate_index.py

      # 7Ô∏è‚É£ Log in DockerHub
      - name: Log in DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # 8Ô∏è‚É£ Build & push NGINX
      - name: Build & push NGINX
        working-directory: monitoring-project/docker/nginx
        run: |
          IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/custom-nginx
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      # 9Ô∏è‚É£ Build & push Flask app
      - name: Build & push Flask app
        working-directory: monitoring-project/app
        run: |
          IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/flask-app
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      # üîü Retrieve SSH key from SSM and save as file
      - name: Retrieve SSH key from SSM
        run: |
          aws ssm get-parameter \
            --name "/ssh/monitoring-project" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text \
            --region $AWS_REGION > monitoring-project.pem
          chmod 600 monitoring-project.pem

      # 1Ô∏è‚É£1Ô∏è‚É£ Deploy stack on EC2 using SSH key file
      - name: Deploy stack on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key_path: monitoring-project.pem
          script: |
            cd /opt/monitoring/monitoring-project

            # Evita el warning de "dubious ownership"
            git config --global --add safe.directory /opt/monitoring

            # Actualiza el repo
            git pull origin main

            # Evita error de permisos con Docker
            sudo docker-compose pull
            sudo docker-compose up -d --remove-orphans