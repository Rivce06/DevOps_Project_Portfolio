name: CI/CD Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.7'

      - name: Generate index.html
        working-directory: monitoring-project/docker/nginx
        run: python generate_index.py

      # 2️⃣ Log in to DockerHub
      - name: Log in DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # 3️⃣ Build & Push NGINX
      - name: Build & push NGINX
        working-directory: monitoring-project/docker/nginx
        run: |
          IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/custom-nginx
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      # 4️⃣ Build & Push Flask App
      - name: Build & push Flask app
        working-directory: monitoring-project/app
        run: |
          IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/flask-app
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      # 5️⃣ Init Terraform y obtener IP de EC2
      - name: Get EC2 public IP from Terraform
        id: ec2
        run: |
          cd monitoring-project/infra
          terraform init
          IP=$(terraform output -raw instance_public_ip)
          echo "EC2_IP=$IP" >> $GITHUB_ENV

      # 6️⃣ Deploy stack on EC2
      - name: Deploy stack on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd /opt/monitoring/monitoring-project
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
